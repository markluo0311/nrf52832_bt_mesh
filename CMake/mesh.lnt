// Lint configuration file suitable for the Mesh project stack code and unit tests

// Mimic compiler message output format:
-format=%(%f:%l:%c: %t: %n: %m%)

// Don't break long lines, output messages on one line:
-width(0, 4)                 // Don't break lines
-h1

// Allow parsing ridiculously long lines (required for parsing certain mock files):
+linebuf

// Add standard library include directories:
-i"C:\keil_v5\ARM\ARMCC\include"
-i"C:\keil_v5\ARM\Pack\ARM\CMSIS\5.0.0\CMSIS\Include"

// Add preprocessor definitions:
-d__svc()=                   // Needed for SoftDevice compatibility
-d__enable_irq()=            // Macro for enabling IRQs
-d__disable_irq()=           // Macro for disabling IRQs
-d__current_pc()=0x12345678  // Macro for returning the current PC
-d__MODULE__=__FILE__        // ARMCC-specific define, supposed to provide __FILE__ without the pathname
-d__CC_ARM                   // We use armcc, so let lint pretend to be armcc as well

// Enable support for variable-length arrays:
+fvl

// Activate parsing of the GCC __attribute keyword:
-rw_asgn(__attribute__, __gcc_attribute__)
-rw_asgn(__attribute, __gcc_attribute__)

// Activate special semantics for inline assembly keywords:
-rw_asgn(__asm, __ARM_asm)
-rw_asgn(asm, __ARM_asm)

// Activate va_arg functions:
-d__va_start(a,b)=a=(va_list){0}
-d__va_end(a)=

// The following options can be enabled if you want to check for correctness of IRQ locking;
// they have been commented out because Lint prints hundreds of empty lines when they are enabled,
// as well as returning an error even if no problems are detected.
//-sem(__enable_irq, thread_unlock)
//-sem(__disable_irq, thread_lock)
//-sem(timer_mut_lock, thread_lock)
//-sem(timer_mut_unlock, thread_unlock)

// Functions that have side-effects that are invisible to Lint:
-esym(522, timer_mut_unlock, timer_mut_lock)

// Enable support for POSIX threads, used in the unit tests:
-dpthread_mutex_t=int
-sem(pthread_mutex_lock, thread_lock)
-sem(pthread_mutex_unlock, thread_unlock)

// Enable strong boolean handling:
-d_Bool=unsigned
-strong(B,_Bool)
-dbool=_Bool
-dtrue=((_Bool)1)
-dfalse=((_Bool)0)
-d__bool_true_false_are_defined=1 // Tell the standard library we have our own bool

-A(C99)                      // Enable C99 mode

// Set type sizes:
-sp4                         // size of pointer is 4 bytes
-si4                         // size of integer is 4 bytes
-sl4                         // size of long is 4 bytes
-sll8                        // size of long long is 8 bytes
+fll                         // enable support for long long

// A note about packed structs: packed structs are achieved by adding lint comments around the structs:
// /*lint -align_max(push) -align_max(1) */
// typedef struct {
//     ... something ...
// } something_t;
// /*lint -align_pop(pop) */
// This sets the alignment requirement for the fields in the struct to 1 byte, packing the struct.

// Options needed to parse the ARMCC standard library headers:
-d__INTADDR__=
-d__value_in_regs=void
-emacro(10,_ARMABI_PURE,__value_in_regs,uuid_packed_t)
-esym(10,__pure,_ARMABI_PURE,uuid_packed_t)
-esym(36,__sdiv32by16,__udiv32by16,__sdiv64by32)
-elib(10, 19)                                            // Ignore some syntax errors from library headers

// Ignore return values from standard functions:
-esym(534, memcpy, memmove, memset, signal, fflush)
// SEGGER functions return a value, but we do not use it:
-esym(534, SEGGER_RTT_printf, SEGGER_RTT_vprintf, SEGGER_RTT_Write)
// Some CMSIS functions return a value, but we do not use it:
-esym(534, NVIC_DisableIRQ, NVIC_EnableIRQ, NVIC_SetPendingIRQ, NVIC_SetPriority, NVIC_ClearPendingIRQ)
// Tell Lint that CMSIS functions have side-effects:
-esym(522, NVIC_EnableIRQ, NVIC_DisableIRQ)

// Warning level for the project (2 catches most problems, use 3 if you want to be extra careful):
-w2

// The following info messages are generated by the hundreds, and generally we consider them ignorable
// Turn them on locally if considered relevant.

// Ignored warnings:
-e46        // The ARM compiler can handle bit fields of all types
-e451       // Repeatedly included header file without a standard include guard: this is caused by ARMCC's standard library.
-e485       // Duplicate initialization of object element: this is caused by our use of multi-level designator lists, which is harmless.
-e506       // Constant value boolean: can happen when testing preprocessor macros in if() statements.
-e522       // Function call lacks side-effects: empty functions cause this warning, but compilers automatically remove such functions.
-e537       // Repeated included header: since we use include-guards, this is a pointless warning.
-e655       // Bitwise operation uses compatible enumerations: this is caused by our use of enums in bitwise operations, which is harmless.
-e641       // Converting enum to int: implicit conversion between enums and ints is permitted.
-e651       // Potentially confusing initializer: this is a subjective opinion.
-e717       // We are deliberately using do { something(); } while(0) in macros.
-e726       // Extraneous comma: this is permitted at the end of lists
-e740       // Unusual pointer cast: only matters if pointers to different types are differently represented in hardware.
-e774       // Boolean within 'if' always evaluates to true: happens when comparing preprocessor defines in if() statements.
-e784       // 0-character truncated from string: we initialize some cryptographic arrays with strings and discard the 0, which is safe.
-e788       // Enum constant not used within defaulted switch: if the switch has a 'default', then it's usually safe.
-e826       // Suspicious pointer-pointer conersion (area too small): we convert many buffers of varying sizes around. Generally, it is safe.
-e834       // Operator followed by the same operator is confusing: stylistic choice.
-e835       // Zero given as left/right argument to operator: this often happens when using macros.
-e845       // Left argument to bitwise operator is certain to be 0: this can happen when setting hardware registers.

// Added warnings:
+e939       // Function was given without return type.

// A higher number of passes is recommended to catch more potential problems:
-passes(2)

// Typedef'ed symbol redeclared: this can happen when using NRF_MESH_STATIC_ASSERT, and is harmless.
-esym(452, static_assert)
// Side-effect in initializer: these macros are safe to use in initializers.
-emacro(446, LE2BE16, BE2LE16, LE2BE32, BE2LE32)
// Constant value boolean: these are expected in assertions:
-emacro(506, NRF_MESH_STATIC_ASSERT, NRF_MESH_ASSERT)
// Boolean within 'if' always evaluates to true: this happens in assertions
-emacro(774, NRF_MESH_ASSERT)
// Constant expression evaluates to 0:
-emacro(778, IS_WORD_ALIGNED)

// Mark the assertion handler as noreturn:
-sem(m_assertion_handler, r_no)

// Calls to TEST_NRF_MESH_ASSERT_EXPECT with void functions as argument causes Lint to complain;
// it thinks the return value of the functions are going to be used for something, but it's not: 
-ecall(144, TEST_NRF_MESH_ASSERT_EXPECT)
-ecall(516, TEST_NRF_MESH_ASSERT_EXPECT)

// Tell Lint that about Unity functions that do not return, to prevent various warnings from following code:
-sem(UnityFail, r_no)
-sem(UnityIgnore, r_no)
-sem(UnityPass, r_no)

-restore_at_end // Restores the above warning settings at the end of a module if overridden for a full file

